#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    /*scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };*/

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp DEL         &kp N1  &kp N2        &kp N3            &kp N4        &kp N5       &trans  &kp N6     &kp N7         &kp N8             &kp N9           &kp N0         &kp RIGHT_BRACKET
&kp ESC         &kp Q   &kp W         &kp E             &kp R         &kp T        &trans  &kp Y      &kp U          &kp I              &kp O            &kp P          &kp LEFT_BRACKET
&kp LEFT_SHIFT  &kp A   &kp S         &kp D             &kp F         &kp G        &trans  &kp H      &kp J          &kp K              &kp L            &kp SEMICOLON  &kp APOS
&kp TAB         &kp Z   &kp X         &kp C             &kp V         &kp B        &trans  &kp N      &kp M          &kp COMMA          &kp DOT          &kp SLASH      &kp BACKSPACE
&trans          &mo 1   &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_GUI  &kp SPACE    &trans  &kp ENTER  &kp RIGHT_GUI  &kp RIGHT_CONTROL  &kp RIGHT_SHIFT  &mo 2
            >;

            //sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;

            display-name = "BASE";
        };

        navigation {
            bindings = <
&trans        &trans  &trans  &trans  &trans  &trans    &trans  &kp F1          &kp F2    &kp F3        &kp F4           &kp F5           &kp F6
&trans        &trans  &trans  &trans  &trans  &trans    &trans  &kp F7          &kp F8    &kp F9        &kp F10          &kp F11          &kp F12
&kp CAPSLOCK  &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT_ARROW  &kp DOWN  &kp UP_ARROW  &kp RIGHT_ARROW  &kp PRINTSCREEN  &trans
&trans        &trans  &trans  &trans  &trans  &trans    &trans  &trans          &kp END   &kp HOME      &trans           &trans           &trans
&trans        &trans  &trans  &trans  &trans  &trans    &trans  &trans          &trans    &trans        &trans           &trans
            >;

            display-name = "NAV";

            //sensor-bindings = <&scroll_encoder>;
        };

        symbols {
            bindings = <
&trans  &trans     &trans         &trans     &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp GRAVE  &kp BACKSLASH  &kp UNDER  &kp PIPE   &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp TILDE  &kp PLUS       &kp MINUS  &kp EQUAL  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans         &trans     &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans         &trans     &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;

            display-name = "SYM";

            //sensor-bindings = <&scroll_encoder>;
        };

        adjust {
            display-name = "ADJ";
            bindings = <
&trans  &trans        &kp C_BRIGHTNESS_INC  &trans        &trans        &trans          &trans  &kp C_VOL_DN     &kp C_PREVIOUS   &kp C_PLAY_PAUSE  &kp C_NEXT       &kp C_MUTE  &trans
&trans  &bt BT_CLR    &bt BT_CLR_ALL        &trans        &trans        &trans          &trans  &kp C_VOLUME_UP  &trans           &trans            &trans           &trans      &trans
&trans  &out OUT_USB  &out OUT_BLE          &trans        &trans        &trans          &trans  &rgb_ug RGB_SPD  &rgb_ug RGB_SPI  &rgb_ug RGB_BRD   &rgb_ug RGB_BRI  &trans      &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1          &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF   &trans           &trans      &trans
&trans  &trans        &trans                &trans        &trans        &trans          &trans  &trans           &trans           &trans            &trans           &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjustConditional {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
